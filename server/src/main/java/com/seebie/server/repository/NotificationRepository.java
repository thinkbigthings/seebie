package com.seebie.server.repository;

import com.seebie.server.entity.Notification;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import java.time.Instant;
import java.util.List;
import java.util.Optional;


public interface NotificationRepository extends JpaRepository<Notification, Long> {

    @Query("SELECT n FROM Notification n WHERE n.user.username=:username")
    Optional<Notification> findBy(String username);

    /**
     * This is a native query because the method parameters comparing against the JPA types were different
     * but the corresponding native database types were the same.
     * Note that the lock needs to be native too ("FOR NO KEY UPDATE")
     * A JPQL would be very similar (in fact the query here was generated by Hibernate after building the same
     * thing in JPQL)
     *
     * This can be tested with separate shells into the database.
     * Observe manually starting a transaction in one shell, doing a select,
     * then starting a transaction in another shell and trying the same select.
     * The second select will block (default timeout is "0" which means block indefinitely)
     * until you commit the first transaction.
     *
     * START TRANSACTION;
     * SELECT * FROM NOTIFICATION FOR NO KEY UPDATE;
     * COMMIT;
     *
     * This default behavior is fine: a second query will just find nothing after the last_sent time is updated.
     * If we WANT another transactional attempt to cause an error,
     * An error can be triggered if a lock timeout is set:
     * SET lock_timeout TO '2s';
     *
     * @param lastNotificationSentBefore If a notification hasn't been sent since this time, then one should be sent.
     * @param lastSleepLoggedBefore If sleep has not been logged since this time, then notification should be sent
     *
     * @return Notification records that have expired and need to be sent.
     */
    @Query(nativeQuery = true, value = """
            SELECT *
            FROM notification n
            WHERE n.last_sent <= ?1
            AND NOT EXISTS (
                SELECT s.id
                FROM sleep_session s, app_user u
                WHERE s.user_id=u.id 
                AND s.stop_time > ?2 
                AND u.id=n.user_id
                AND u.notifications_enabled=TRUE
                ORDER BY s.stop_time DESC LIMIT 1
            )
            FOR NO KEY UPDATE
            """)
    List<Notification> findNotificationsBy(Instant lastNotificationSentBefore, Instant lastSleepLoggedBefore);
/*

            SELECT *
            FROM notification n
            WHERE n.last_sent <= '2023-04-08 17:47:27.704177+00'
            AND NOT EXISTS (
                SELECT s.id
                FROM sleep_session s, app_user u
                WHERE s.user_id=u.id
                AND s.stop_time >= '2023-04-08 23:47:00+00'
                AND u.id=n.user_id
                AND u.notifications_enabled=TRUE
                LIMIT 1
            )
            FOR NO KEY UPDATE;


                SELECT s.id
                FROM sleep_session s, app_user u
                WHERE s.user_id=2
                AND s.stop_time >= '2023-04-08 23:47:00+00'
                AND u.id=2
                AND u.notifications_enabled=TRUE
                LIMIT 1;

 */
}
