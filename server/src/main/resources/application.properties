
# See a list of properties here
# https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html

app.apiVersion=24

# app.security.rememberMe.key=xxxxxxxxxxxxxxxx # do not set here, this is sensitive information
app.security.rememberMe.tokenValidity=30d

app.notification.scan.enabled=true
app.notification.scan.schedule.fixedDelayMinutes=60
app.notification.output=EMAIL
app.notification.triggerAfter.sleepLog=30h
app.notification.triggerAfter.lastNotified=24h

# see what spring boot is doing
#logging.level.org.springframework.security=DEBUG
#logging.level.org.springframework.security.web.csrf.CsrfFilter=DEBUG
#logging.level.org.springframework.web=DEBUG
#logging.level.org.springframework.boot.autoconfigure=DEBUG
#logging.level.org.springframework.security.web.FilterChainProxy=DEBUG
#logging.level.org.springframework.web.FilterChainProxy=DEBUG
#logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

spring.main.web-application-type=SERVLET

server.port=9000
server.servlet.context-path=/api
server.shutdown=graceful
spring.lifecycle.timeout-per-shutdown-phase=20s

spring.flyway.enabled=true


# static content and API all come from the same base
# can only use /api for api-only requests if the UI is served separately
# server.servlet.context-path=/api

# Handling of HTTP requests may take longer while any deferred initialisation occurs
# Failures that would normally occur at startup will now not occur until later
# So this can be true for dev and false for qa/perf/prod
spring.main.lazy-initialization=false


# Maximum amount of worker threads, default is 10
server.tomcat.threads.max=50
# Minimum amount of worker threads
server.tomcat.threads.min-spare=1 
# Maximum queue length for incoming connection requests when all possible request processing threads are in use
server.tomcat.accept-count=200

# these three properties allow for batch inserts
spring.jpa.properties.hibernate.jdbc.batch_size=50
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.open-in-view=false

# Activating this setting will report HHH000104 warning an exception of type:
# org.hibernate.HibernateException: firstResult/maxResults specified with collection fetch.
# In memory pagination was about to be applied. Failing because 'Fail on pagination over
# collection fetch' is enabled.
spring.jpa.properties.hibernate.query.fail_on_pagination_over_collection_fetch=true

# actuator settings
management.info.git.enabled=true
management.info.git.mode=full
management.endpoints.web.exposure.include=flyway,health,info,sessions
management.endpoints.web.discovery.enabled=true

management.health.mail.enabled=false
spring.mail.host=smtp.gmail.com
spring.mail.port=587
# spring.mail.username=xxxxxxxxxxxxxxxx # do not set here, this is sensitive information
# spring.mail.password=xxxxxxxxxxxxxxxx # do not set here, this is sensitive information
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# For setting the timeout of the session you can use the spring.session.timeout property.
# If that property is not set, the auto-configuration falls back to the value of server.servlet.session.timeout
# timeout is a timeout for inactivity (counts from last authenticated request)
# If a duration suffix is not specified, seconds are used.

spring.session.store-type=jdbc
spring.session.jdbc.table-name=SPRING_SESSION
spring.session.jdbc.initialize-schema=never
spring.session.timeout=12h
# spring.session.jdbc.cleanup-cron # default runs every minute
