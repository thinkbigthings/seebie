
plugins {
    id 'org.springframework.boot' version '3.2.0'
    id 'jacoco' // core plugin provided by gradle
    id 'org.flywaydb.flyway' version '9.8.3'
    id "com.gorylenko.gradle-git-properties" version "2.4.1"
}


apply plugin: 'java' // core plugin provided by gradle

group = 'com.seebie'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' } // as needed
}

test {
    useJUnitPlatform()
}


// use preview features
tasks.withType(JavaCompile) {
    options.compilerArgs += "--enable-preview"
    // options.compilerArgs += "-Xlint:preview"
    options.compilerArgs += "-Xlint:unchecked"
    options.compilerArgs += "-Xlint:deprecation"
}
tasks.withType(Test) {
    jvmArgs += "--enable-preview"
}
tasks.withType(JavaExec) {
    jvmArgs += '--enable-preview'
}

dependencies {

    implementation 'org.apache.commons:commons-csv:1.10.0'
    implementation 'org.flywaydb:flyway-core:9.22.2'
    implementation 'org.postgresql:postgresql:42.6.0'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.2.0'
    implementation 'org.springframework.boot:spring-boot-starter-web:3.2.0'
    implementation 'org.springframework.boot:spring-boot-starter-actuator:3.2.0'
    implementation 'org.springframework.boot:spring-boot-starter-security:3.2.0'
    implementation 'org.springframework.boot:spring-boot-starter-validation:3.2.0'
    implementation 'org.springframework.boot:spring-boot-starter-mail:3.2.0'
    implementation 'org.springframework.session:spring-session-jdbc:3.1.2'

    testImplementation 'net.datafaker:datafaker:2.0.1'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.5.0'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers:3.2.0'
    testImplementation 'org.springframework.security:spring-security-test:6.1.4'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.2.0'
    testImplementation "org.testcontainers:junit-jupiter:1.19.0"
    testImplementation "org.testcontainers:postgresql:1.19.0"
    testImplementation "org.testcontainers:testcontainers:1.19.0"
}

// Spring Boot builds both an executable jar and a plain jar suitable for use as a library.
// This block prevents building the "plain" jar so we only build the executable jar
jar {
    enabled = false
}

// https://docs.gradle.org/current/userguide/jacoco_plugin.html
jacoco {
    toolVersion = "0.8.10"
}

jacocoTestCoverageVerification {

    // Include both unit test and integration test execution data
    executionData fileTree(layout.buildDirectory).include("/jacoco/**/jacocoTest.exec")

    violationRules {
        rule {
            limit {
                minimum = 0.90
            }
        }
    }

}


jacocoTestReport {

    reports {
        xml.required = false
        csv.required = true
        html.required = true
    }

    // so we can get test data from both tests and integration tests
    getExecutionData().from(fileTree(layout.buildDirectory).include("/jacoco/**/jacocoTest.exec"))

}

// this copies the html file for the coverage complexity plot
task copyCoverageReport(type: Copy) {
    from layout.buildDirectory.dir("resources/test/reports")
    into layout.buildDirectory.dir("reports")
}
copyCoverageReport.mustRunAfter jacocoTestReport
copyCoverageReport.dependsOn jacocoTestReport
build.dependsOn copyCoverageReport

test {
    useJUnitPlatform {
        excludeTags "integration"
    }
    jacoco {
        destinationFile = layout.buildDirectory.file("jacoco/test/jacocoTest.exec").get().asFile
        classDumpDir = layout.buildDirectory.file("jacoco/test/classpathdumps").get().asFile
    }
    finalizedBy jacocoTestReport // report is always generated after tests run
}

def integrationTest = tasks.register("integrationTest", Test) {

    useJUnitPlatform {
        includeTags "integration"
    }

    // To show standard out and error streams, uncomment this line
    // (you'll see ALL the SQL the runs, which is a lot)
    // testLogging.showStandardStreams = true

    // To log the events of tests being started, passed, failed, or skipped
    testLogging {
        events 'passed', 'skipped', 'failed' // , 'started' // if you want to see which test is hanging
    }
    jacoco {
        destinationFile = layout.buildDirectory.file("jacoco/integrationTest/jacocoTest.exec").get().asFile
        classDumpDir = layout.buildDirectory.file("jacoco/integrationTest/classpathdumps").get().asFile
    }

    finalizedBy jacocoTestReport // report is always generated after tests run
}


// break the build if coverage is not met
build.dependsOn jacocoTestCoverageVerification

// ensure outputs of all tests (including integration tests) are included in the jacoco rules verification
jacocoTestCoverageVerification.dependsOn integrationTest
jacocoTestCoverageVerification.dependsOn test


tasks.named("check") {
    dependsOn integrationTest
}

task copyWebApp {
    description 'Copies built files from reactjs to server'
    dependsOn ':reactjs:build'
    doLast {
        copy {
            from(project(":reactjs").buildDir)
            into(project(":server").buildDir.toPath().resolve('resources/main/static'))
        }
    }
}

bootJar.dependsOn copyWebApp


task genKey(type:Exec) {

    var p12File = 'app.p12'

    if( file(p12File).exists()) {
        commandLine 'keytool', '-list', '-storepass', 'password'
    }
    else {
        commandLine 'keytool', '-genkeypair', '-alias', 'app', '-keyalg', 'RSA', '-keysize', '2048', '-validity', '3650',
                '-storetype', 'PKCS12', '-keystore', p12File, '-storepass', 'password', '-keypass', 'password',
                '-dname', 'cn=Unknown, ou=Unknown, o=Unknown, c=Unknown'
    }

}

genKey.dependsOn compileJava
bootJar.dependsOn genKey
bootRun.dependsOn genKey
bootTestRun.dependsOn genKey

tasks.named('bootRun', org.springframework.boot.gradle.tasks.run.BootRun) {
    args = [
            '--app.security.rememberMe.key=dev-only',
            '--spring.mail.username=undefined@seebie.com'
    ]
}

tasks.named('bootTestRun', org.springframework.boot.gradle.tasks.run.BootRun) {
    args = [
            '--app.notification.scanFrequencyMinutes=1',
            '--app.notification.triggerAfter.lastNotified=1m',
            '--app.notification.triggerAfter.sleepLog=1m',
            '--app.security.rememberMe.key=dev-only',
            '--spring.mail.username=unused-for-dev'
    ]
}
